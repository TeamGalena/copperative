buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: true
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

archivesBaseName = "${mod_name} ${minecraft_version}-"

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            taskName 'Client'
            arg "-mixin.config=galenacapes.forge.mixins.json"
        }

        server {
            workingDirectory project.file('run/server')
            taskName 'Server'
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'supplementaries', '--existing-mod', 'quark'
            taskName 'Data'
        }

        forEach {
            it.property("forge.logging.console.level", "debug")

            it.ideaModule("${project.name}.main")
            it.arg("-mixin.config=${mod_id}.mixins.json")

            it.mods {
                create(mod_id) {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven {
        // Location of the maven that hosts JEI files (and TiC)
        name 'Progwml6 maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        // Location of a maven mirror for JEI files, as a fallback
        name 'ModMaven'
        url 'https://modmaven.k-4u.nl'
    }
    maven {
        // Location of the maven for vazkii's mods
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.architectury.dev/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    // for config & dynamic data/resourcepack
    implementation fg.deobf("curse.maven:selene-499980:${moonlight_lib_version}")

    implementation fg.deobf("curse.maven:quark-243121:${quark_version}")
    implementation fg.deobf("vazkii.autoreglib:AutoRegLib:${arl_version}")
    //compileOnly fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    implementation fg.deobf("curse.maven:supplementaries-412082:${supplementaries_version}")
    implementation fg.deobf("curse.maven:oreganized-769203:${oreganized_version}")

    // Pretty Shaders for Showcases
    //runtimeOnly fg.deobf("curse.maven:oculus-581495:${oculus_version}")
    //runtimeOnly fg.deobf("curse.maven:rubidium-574856:${rubidium_version}")

    // For testing compatibility
    //runtimeOnly fg.deobf("curse.maven:create-328085:${create_version}")
    //runtimeOnly fg.deobf("curse.maven:flywheel-486392:${flywheel_version}")
    //runtimeOnly fg.deobf("curse.maven:create-alloyed-564792:${create_alloyed_version}")
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestampe'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}